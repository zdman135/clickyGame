{"version":3,"sources":["data/data.js","components/NavBar/NavBar.js","components/Megatron/Megatron.js","components/ModelCards/ModelCards.js","App.js","serviceWorker.js","index.js"],"names":["models","id","image","NavBar","props","react_default","a","createElement","className","href","guess","currentScore","topScore","Megatron","ModelWrapper","_ref","children","ModelCards","onClick","src","alt","guessArray","App","state","guessType","handleGameClick","event","preventDefault","_this","recordGuess","target","setState","shuffle","this","array","sort","Math","random","score","attempt","includes","setHighScore","push","length","_this2","components_NavBar_NavBar","components_Megatron_Megatron","map","model","ModelCards_ModelCards","key","process","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67401fd1.chunk.js","sourcesContent":["const models = [\n  {\n    id: '1',\n    image: '/images/model1.jpg'\n  },\n  {\n    id: '2',\n    image: '/images/model2.jpg'\n  },\n  {\n    id: '3',\n    image: '/images/model3.jpg'\n  },\n  {\n    id: '4',\n    image: '/images/model4.jpg'\n  },\n  {\n    id: '5',\n    image: '/images/model5.jpg'\n  },\n  {\n    id: '6',\n    image: '/images/model6.jpg'\n  },\n  {\n    id: '7',\n    image: '/images/model7.jpg'\n  },\n  {\n    id: '8',\n    image: '/images/model8.jpg'\n  },\n  {\n    id: '9',\n    image: '/images/model9.jpg'\n  },\n  {\n    id: '10',\n    image: '/images/model10.jpg'\n  },\n  {\n    id: '11',\n    image: '/images/model11.jpg'\n  },\n  {\n    id: '12',\n    image: '/images/model12.jpg'\n  },\n]\n\nexport default models;","import React from 'react';\nimport './NavBar.css';\n\nfunction NavBar(props) {\n    return (\n        <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n            <a className=\"navbar-brand\" href=\"/\">Insta-Models Memory Game</a>\n            <div className=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\n                <ul className=\"navbar-nav text-light \">\n                    <li className=\"nav-item the-pad\">{props.guess}</li>\n                    <li className=\"nav-item\">Score: {props.currentScore} | Top Score: {props.topScore}</li>\n                </ul>\n            </div>\n        </nav>\n    );\n}\n\nexport default NavBar;","import React from 'react';\n\nimport './Megatron.css';\n\nfunction Megatron() {\n    return (\n        <div className=\"jumbotron\">\n            <div className=\"container\">\n                <h1 className=\"display-3\">Insta-Model Memory Game</h1>\n                <p>Click on an image to earn points, but don't click on any more than once!</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Megatron;","import React from 'react';\n\nimport './ModelCards.css'\n\n\nexport function ModelWrapper({children}) {\n    return(\n        <div className=\"container boxes\">{children}</div>\n    );\n}\n\nexport function ModelCards(props) {\n    return (        \n        <div className=\"card card-dimensions box-margin\">\n        <a href=\"\">\n            <img className=\"card-img-top\" id={props.id} onClick={props.onClick} src={props.image} alt={props.alt} />\n            </a>\n        </div>\n    );\n}\n\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport models from './data/data'\n\nimport NavBar from './components/NavBar/NavBar'\nimport Megatron from './components/Megatron/Megatron';\nimport { ModelCards, ModelWrapper } from './components/ModelCards/ModelCards';\n\n\nlet guessArray = [];\nclass App extends Component {\n  state = {\n    models: [],\n    currentScore: 0,\n    topScore: 0,\n    guessType: \"Click an Image to Begin!\"\n  };\n\n  componentDidMount() {\n    this.setState({models: this.shuffle(models) });\n  }\n  \n  handleGameClick = event => {\n    event.preventDefault()\n    this.recordGuess(event.target.id)\n    this.setState({models: this.shuffle(models) });\n  }\n\n  shuffle(array) {\n    return array.sort(() => Math.random() - 0.5);\n  }\n\n  setHighScore(score) {\n    if(score > this.state.topScore) {\n      this.setState({topScore: score});\n    }\n  }\n\n  recordGuess(attempt) {\n    if(guessArray.includes(attempt)) {\n      this.setState({guessType: \"You guessed incorrectly!\"});\n      this.setHighScore(this.state.currentScore);\n      this.setState({currentScore: 0})\n      guessArray = [];\n    } else {\n      guessArray.push(attempt);\n      this.setState({guessType: \"You guessed correctly!\"});\n      this.setState({currentScore: guessArray.length})\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar \n        currentScore={this.state.currentScore}\n        topScore={this.state.topScore}\n        guess={this.state.guessType}\n        />\n        <Megatron />\n\n        <ModelWrapper>\n          {this.state.models.map( model => {\n            return (\n            <ModelCards\n            key={model.id}\n            id={model.id}\n            image={process.env.PUBLIC_URL + model.image}\n            onClick={this.handleGameClick}\n            />\n          );\n          })}\n        </ModelWrapper>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}